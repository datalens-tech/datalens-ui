import React from 'react';

import {Button} from '@gravity-ui/uikit';
import block from 'bem-cn-lite';
import AutogeneratedPaletteIcon from 'components/AutogeneratedPaletteIcon/AutogeneratedPaletteIcon';
import {i18n} from 'i18n';
import {useDispatch, useSelector} from 'react-redux';
import {ColorsConfig, Feature, Field, GradientType, InternalPaletteId} from 'shared';
import {fetchColorPalettes} from 'store/actions/colorPaletteEditor';
import {selectColorPalettesDict} from 'store/selectors/colorPaletteEditor';
import Utils from 'utils';

import {openDialogColor} from '../../../../../actions/dialogColor';
import {PaletteIcon, PaletteType} from '../../../../PaletteIcon/PaletteIcon';
import {ExtraSettings} from '../../../DialogColor/DialogColor';

import './ButtonColorDialog.scss';

type ButtonColorDialogProps = {
    paletteType: PaletteType;
    paletteId: string;
    colorsConfig: ColorsConfig;
    onApplyDialogColor: (config: ColorsConfig) => void;
    field: Field;
    qa?: string;
    disabled?: boolean;
    extraSettings?: ExtraSettings;
};

const b = block('button-color-dialog');

export const ButtonColorDialog: React.FC<ButtonColorDialogProps> = (
    props: ButtonColorDialogProps,
) => {
    const dispatch = useDispatch();
    const colorPalettes = useSelector(selectColorPalettesDict);

    React.useEffect(() => {
        if (Utils.isEnabledFeature(Feature.CustomColorPalettes) && !colorPalettes.length) {
            dispatch(fetchColorPalettes());
        }
    }, []);

    const {
        paletteType,
        paletteId,
        onApplyDialogColor,
        field,
        colorsConfig,
        qa,
        disabled,
        extraSettings,
    } = props;

    const colorPalette = colorPalettes[paletteId];

    let paletteName: string;

    if (colorPalette) {
        paletteName = colorPalette.displayName;
    } else if (paletteType === PaletteType.ColorPalette) {
        paletteName = i18n('wizard.palette', `label_${paletteId as InternalPaletteId}`);
    } else {
        paletteName = i18n('wizard', `label_${paletteId as GradientType}`);
    }

    return (
        <Button
            qa={qa}
            view="outlined"
            disabled={disabled}
            className={b()}
            onClick={() =>
                dispatch(
                    openDialogColor({
                        item: field,
                        colorsConfig,
                        extra: extraSettings,
                        onApply: onApplyDialogColor,
                        isColorModeChangeAvailable: false,
                    }),
                )
            }
        >
            <span className={b('content-container')}>
                {colorPalette ? (
                    <AutogeneratedPaletteIcon
                        className={b('icon')}
                        colors={colorPalette.colors}
                        isGradient={colorPalette.isGradient}
                    />
                ) : (
                    <PaletteIcon
                        paletteId={paletteId}
                        paletteType={paletteType}
                        className={b('icon')}
                    />
                )}

                <span>{paletteName}</span>
            </span>
        </Button>
    );
};
