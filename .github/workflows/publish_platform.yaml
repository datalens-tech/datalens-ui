on:
  push:
    branches:
      - publish-datalens-platform-action

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

name: Publish Platform

permissions:
  contents: write

jobs:
  build:
    name: datalens-ui
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      - name: 'Get last release branch'
        run: |
          MAIN_COMMIT=$(git rev-parse origin/main)
          LAST_RELEASE_BRANCH=$(git branch -r --sort=-v:refname --format='%(refname:short)' | grep 'origin/release' | awk -F'/' '{print $2}' | head -n 1)
          echo "Last release branch: ${LAST_RELEASE_BRANCH}"
          LAST_RELEASE_COMMIT=$(git rev-parse "origin/$LAST_RELEASE_BRANCH")
          if [ "$MAIN_COMMIT" = "$LAST_RELEASE_COMMIT" ]; then echo "Hash commit in main branch matches the last release branch commit" && exit 0; fi
          LAST_VERSION=$(echo "$LAST_RELEASE_BRANCH" | grep -oE 'release-[0-9]+\.[0-9]+\.[0-9]+' | awk -F'-' '{print $2}')
          echo "LAST_VERSION=$LAST_VERSION" >> "$GITHUB_ENV"
      - name: 'Make new release version number'
        run: |
          MAJOR_VERSION=$(echo "$LAST_VERSION" | cut -d'.' -f1) 
          MINOR_VERSION=$(echo "$LAST_VERSION" | cut -d'.' -f2) 
          PATCH_VERSION=$(echo "$LAST_VERSION" | cut -d'.' -f3)
          NEW_MINOR_VERSION=$((MINOR_VERSION + 1))
          NEW_VERSION="$MAJOR_VERSION.$NEW_MINOR_VERSION.$PATCH_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_ENV"
          NEW_BRANCH="release-$NEW_VERSION"
          echo "NEW_BRANCH=$NEW_BRANCH" >> "$GITHUB_ENV"
          echo "New branch: ${NEW_BRANCH}"
      - name: 'Create new release branch'
        run: |
          git checkout -b "$NEW_BRANCH"
          echo "Created new release branch: $NEW_BRANCH"
      - name: 'Up package version'
        # git push --set-upstream origin "$NEW_BRANCH"
        run: |
          git config user.email "" && git config user.name "GitHub Release"
          npm version "$NEW_VERSION" --no-git-tag-version --allow-same-version
          git add package.json && git add package-lock.json && git commit -am "Bump version to $NEW_VERSION"

      - run: |
          COMMIT_NAME=$(git log -n 1 --pretty=format:%s $MAIN_COMMIT) 
          echo "COMMIT_NAME=$COMMIT_NAME" >> "$GITHUB_ENV"
          echo "TAG_NEW_VERSION=v$NEW_VERSION" >> "$GITHUB_ENV"
      - uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NEW_VERSION }}
          release_name: ${{ env.TAG_NEW_VERSION }}
          commitish: ${{ env.NEW_BRANCH }}
          body: ${{ env.COMMIT_NAME }}
          draft: true
          prerelease: false
      - run: echo "Version bumped to '$TAG_NEW_VERSION' and pushed to remote repository"
