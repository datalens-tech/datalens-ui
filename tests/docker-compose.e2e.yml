services:
  postgres:
    container_name: e2e-datalens-postgres
    image: ghcr.io/datalens-tech/datalens-postgres:16
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "pg-us-db"]
      interval: 5s
      retries: 10
      start_period: 3s
    environment:
      CONTROL_API_CRYPTO_KEY: "ZGF0YWxlbnN1bnNlY3VyZWZlcm5ldGNyeXB0b2tleQo="
      US_ENDPOINT: http://us:8080
      POSTGRES_PASSWORD: postgres
      INIT_DEMO_DB: 1
      INIT_DEMO_DATA: 0
      INIT_META_MANAGER: 0
    volumes:
      - ./data:/init/post-init
    networks:
      - default

  control-api:
    container_name: e2e-datalens-control-api
    image: ghcr.io/datalens-tech/datalens-control-api:${CONTROL_API_VERSION:-0.2139.0}
    environment:
      BI_API_UWSGI_WORKERS_COUNT: 4
      RQE_FORCE_OFF: 1
      RQE_SECRET_KEY: ""
      DL_CRY_ACTUAL_KEY_ID: KEY
      DL_CRY_KEY_VAL_ID_KEY: "ZGF0YWxlbnN1bnNlY3VyZWZlcm5ldGNyeXB0b2tleQo="
      US_HOST: http://us:8080
      US_MASTER_TOKEN: us-master-token
      CONNECTOR_AVAILABILITY_VISIBLE: "clickhouse,postgres,chyt"
    networks:
      - default

  data-api:
    container_name: e2e-datalens-data-api
    image: ghcr.io/datalens-tech/datalens-data-api:${DATA_API_VERSION:-0.2139.0}
    environment:
      GUNICORN_WORKERS_COUNT: 5
      RQE_FORCE_OFF: 1
      CACHES_ON: 0
      MUTATIONS_CACHES_ON: 0
      RQE_SECRET_KEY: ""
      DL_CRY_ACTUAL_KEY_ID: KEY
      DL_CRY_KEY_VAL_ID_KEY: "ZGF0YWxlbnN1bnNlY3VyZWZlcm5ldGNyeXB0b2tleQo="
      BI_COMPENG_PG_ON: 1
      BI_COMPENG_PG_URL: postgresql://pg-user:postgres@postgres:5432/pg-compeng-db
      US_HOST: http://us:8080
      US_MASTER_TOKEN: ${US_MASTER_TOKEN:-us-master-token}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - default

  us:
    container_name: e2e-datalens-us
    image: ghcr.io/datalens-tech/datalens-us:${US_VERSION:-release}
    environment:
      APP_INSTALLATION: opensource
      APP_ENV: prod
      APP_PORT: 8080
      MASTER_TOKEN: us-master-token
      POSTGRES_DSN_LIST: postgresql://pg-user:postgres@postgres:5432/pg-us-db
      US_SURPRESS_DB_STATUS_LOGS: "true"
      SKIP_INSTALL_DB_EXTENSIONS: 1
      USE_DEMO_DATA: 0
      USE_E2E_MOCK_DATA: 0
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - default

  datalens-from-build:
    container_name: e2e-datalens-ui-build
    image: e2e-datalens-ui:pr
    build:
      dockerfile: Dockerfile
      context: ../
      network: host
    environment:
      APP_MODE: full
      APP_ENV: production
      APP_INSTALLATION: opensource
      AUTH_POLICY: disabled
      US_ENDPOINT: http://us:8080
      BI_API_ENDPOINT: http://control-api:8080
      BI_DATA_ENDPOINT: http://data-api:8080
      HC: ${HC:-0}
    depends_on:
      - us
      - control-api
      - data-api
    ports:
      - 8080:8080
    networks:
      - default

  datalens-from-image:
    container_name: e2e-datalens-ui-image
    image: ghcr.io/datalens-tech/datalens-ui:${UI_VERSION:-release}
    environment:
      APP_MODE: full
      APP_ENV: production
      APP_INSTALLATION: opensource
      AUTH_POLICY: disabled
      US_ENDPOINT: http://us:8080
      BI_API_ENDPOINT: http://control-api:8080
      BI_DATA_ENDPOINT: http://data-api:8080
      HC: ${HC:-0}
    depends_on:
      - us
      - control-api
      - data-api
    networks:
      - default

  datalens-from-image-tests:
    container_name: e2e-datalens-ui-tests
    image: ghcr.io/datalens-tech/datalens-ui:${UI_VERSION:-release}-e2e
    environment:
      E2E_DOMAIN: http://datalens-from-image:8080
      E2E_RETRY_TIMES: ${E2E_RETRY_TIMES:-0}
      E2E_ACTION_TIMEOUT: ${E2E_ACTION_TIMEOUT}
      E2E_EXPECT_TIMEOUT: ${E2E_EXPECT_TIMEOUT}
      E2E_TEST_TIMEOUT: ${E2E_TEST_TIMEOUT}
      NO_AUTH: true
    depends_on:
      - datalens-from-image
    networks:
      - default
